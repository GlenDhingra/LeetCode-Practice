/*
Trying all sorts
Insertion Sort - Accepted [1300 ms]
Quick Sort - Time Limit Exceeded [But answer is correct(checked)] 
Merge Sort - Accepted [ 679ms ]
*/
class Solution 
{
    public int[] sortArray(int[] nums) 
    {
        /* uncomment for insertion sort
		return insertionSort(nums);
        */
		/* uncomment for quick sort
		quickSort( nums , 0 , nums.length - 1 );
        return nums;
		*/
		/*uncomment for merge sort
		mergeSort(nums,0,nums.length - 1);
        return nums;
		*/
    }
    public int[] insertionSort(int[] nums)
    {
        if( nums.length == 1 )
        {
            return nums;
        }
        for( int i = 1 ; i < nums.length ; i++ )
        {
            int key = nums[i];
            int j = i - 1;
            while( j >= 0 && nums[j] > key )
            {
                nums[j+1] = nums[j];
                j--;
            }
            nums[j+1] = key;
        }
        return nums;
    }
    public void quickSort( int nums[] , int low , int high )
    {
        if( low > high )
        {
            return;
        }
        int i = low;
        int k = low;
        int pivot = nums[high];
        while( k < high )
        {
            if( nums[i] < pivot )
            {
                int temp = nums[i];
                nums[i] = nums[k];
                nums[k] = temp;
                i++;
            }
            k++;
        }
        int temp = nums[high];
        nums[high] = nums[i];
        nums[i] = pivot;
        
        quickSort( nums , 0 , i - 1 );
        quickSort( nums , i + 1 , high );
    }
    public void mergeSort( int[] nums , int low , int high )
    {
        if( low < high )
        {
            int mid = (low+high)/2;
            mergeSort( nums , low , mid );
            mergeSort( nums , mid + 1 , high );
            mergeSortHelper( nums, low , mid , high );
        }
    }
    public void mergeSortHelper( int[] nums, int low , int mid , int high )
    {
        if( low >= high )
        {
            return;
        }
        int[] temp = new int[nums.length];
        int k = low;
        int i = low;
        int j = mid + 1;
        
        while( i <= mid && j <= high )
        {
            if( nums[i] < nums[j] )
            {
                temp[k] = nums[i];
                k++;
                i++;
            }
            else
            {
                temp[k] = nums[j];
                j++;
                k++;
            }
        }
        if( i <= mid )
        {
            while( i<= mid )
            {
                temp[k] = nums[i];
                i++;
                k++;
            }
        }
        else
        {
            while( j <= high )
            {
                temp[k] = nums[j];
                j++;
                k++;
            }
        }
        for( int a = low ; a <= high ; a++ )
        {
            nums[a] = temp[a];
        }
    }
}